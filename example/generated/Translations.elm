module Translations exposing (I18n, Language(..), decodeMessages, demo, init, language, languageFromString, languageToFileName_messages, languageToString, languages, loadMessages, paragraph, title)

{-| This file was generated by elm-i18n version 2.6.0.


-}

import Array
import Dict
import Http
import Intl
import Json.Decode
import Maybe
import Parser exposing ((|.), (|=))
import Result
import String
import Tuple


type I18n
    = I18n { messages : Array.Array String } Intl.Intl Language


{-| Initialize an (empty) `I18n` instance. This is useful on startup when no JSON was `load`ed yet.


-}
init : Intl.Intl -> Language -> I18n
init intl lang =
    I18n { messages = Array.empty } intl lang


{-| Enumeration of the supported languages


-}
type Language
    = De
    | En


{-| A list containing all `Language`s


-}
languages : List Language
languages =
    [ De, En ]


{-| Convert a `Language` to its `String` representation.


-}
languageToString : Language -> String
languageToString lang_ =
    case lang_ of
        De ->
            "de"

        En ->
            "en"


{-| Maybe parse a `Language` from a `String`. 
This only considers the keys given during compile time, if you need something like 'en-US' to map to the correct `Language`,
you should write your own parsing function.


-}
languageFromString : String -> Maybe Language
languageFromString lang_ =
    case lang_ of
        "de" ->
            Just De

        "en" ->
            Just En

        _ ->
            Nothing


{-| 
Load translations for identifier 'messages' and a `Language` from the server. This is a simple `Http.get`, if you need more customization,
you can use the `decoder` instead. Pass the path and a callback to your `update` function, for example

    load { language = De, path = "/i18n", onLoad = GotTranslations }

will make a `GET` request to /i18n/messages.de.1130384026.json and will call GotTranslations with the decoded response.


-}
loadMessages : { language : Language, path : String, onLoad : Result Http.Error (I18n -> I18n) -> msg } -> Cmd msg
loadMessages opts =
    Http.get
        { expect = Http.expectJson opts.onLoad decodeMessages
        , url = opts.path ++ "/" ++ languageToFileName_messages opts.language
        }


demo : I18n -> Float -> String
demo ((I18n { messages } _ _) as i18n) number =
    case Array.get 0 messages of
        Just translation ->
            replacePlaceholders i18n [ String.fromFloat number ] translation

        Nothing ->
            fallbackValue


language : I18n -> String -> String
language ((I18n { messages } _ _) as i18n) language_ =
    case Array.get 1 messages of
        Just translation ->
            replacePlaceholders i18n [ language_ ] translation

        Nothing ->
            fallbackValue


paragraph : I18n -> String
paragraph (I18n { messages } _ _) =
    case Array.get 2 messages of
        Just translation ->
            translation

        Nothing ->
            fallbackValue


title : I18n -> String
title (I18n { messages } _ _) =
    case Array.get 3 messages of
        Just translation ->
            translation

        Nothing ->
            fallbackValue


{-| Decode an `I18n` from Json. Make sure this is *only* used on the files generated by this package.


-}
decodeMessages : Json.Decode.Decoder (I18n -> I18n)
decodeMessages =
    Json.Decode.array Json.Decode.string
        |> Json.Decode.map (\arr (I18n i18n intl lang) -> I18n { i18n | messages = arr } intl lang)


fallbackValue : String
fallbackValue =
    "..."


parser : I18n -> List String -> Parser.Parser String
parser ((I18n _ intl lang) as i18n) argList =
    let
        args =
            Array.fromList argList

        getArg n =
            Array.get n args |> Maybe.withDefault ""

        wrappedLang =
            "\"" ++ languageToString lang ++ "\""

        argParser =
            Parser.oneOf
                [ Parser.succeed wrappedLang |. Parser.token "}"
                , Parser.succeed (\str -> wrappedLang ++ ",{" ++ str ++ "}")
                    |= (Parser.chompUntil "}" |> Parser.getChompedString)
                    |. Parser.token "}"
                ]

        matchParser =
            Parser.succeed Tuple.pair
                |= (Parser.chompUntil "|" |> Parser.getChompedString)
                |. Parser.token "|"
                |= (Parser.chompUntil "}"
                        |> Parser.getChompedString
                        |> Parser.andThen
                            (\str ->
                                case Json.Decode.decodeString (Json.Decode.dict Json.Decode.string) ("{" ++ str ++ "}")
                                of
                                    Ok ok ->
                                        Parser.succeed ok

                                    Err err ->
                                        Parser.problem (Json.Decode.errorToString err)
                            )
                   )
                |. Parser.token "}"

        numberFormatUnsafe n parsedArgString =
            Maybe.withDefault "" <|
                Intl.unsafeAccess intl <|
                    "[\"NumberFormat\",[" ++ parsedArgString ++ "],\"format\",[" ++ getArg n ++ "]]"

        dateFormatUnsafe n parsedArgString =
            Maybe.withDefault "" <|
                Intl.unsafeAccess intl <|
                    "[\"DateTimeFormat\",[" ++ parsedArgString ++ "],\"format\",[" ++ getArg n ++ "]]"

        matchStrings n ( default, cases ) =
            Dict.get (getArg n) cases
                |> Maybe.withDefault default
                |> Parser.run (parser i18n argList)
                |> Result.toMaybe
                |> Maybe.withDefault fallbackValue

        matchNumbers n ( default, cases ) =
            getArg n
                |> String.toFloat
                |> Maybe.andThen
                    (\i ->
                        Intl.determinePluralRuleFloat
                            intl
                            { language = languageToString lang, number = i, type_ = Intl.Cardinal }
                            |> Intl.pluralRuleToString
                            |> (\pluralRule -> Dict.get pluralRule cases)
                    )
                |> Maybe.withDefault default
                |> Parser.run (parser i18n argList)
                |> Result.toMaybe
                |> Maybe.withDefault fallbackValue
    in
    Parser.loop "" <|
        \state ->
            Parser.oneOf
                [ Parser.succeed ((++) state >> Parser.Loop)
                    |. Parser.token "{"
                    |= Parser.oneOf
                        [ Parser.succeed getArg |= Parser.int |. Parser.token "}"
                        , Parser.succeed numberFormatUnsafe |. Parser.token "N" |= Parser.int |= argParser
                        , Parser.succeed dateFormatUnsafe |. Parser.token "D" |= Parser.int |= argParser
                        , Parser.succeed matchStrings
                            |. Parser.token "S"
                            |= Parser.int
                            |. Parser.token "|"
                            |= matchParser
                        , Parser.succeed matchNumbers
                            |. Parser.token "P"
                            |= Parser.int
                            |. Parser.token "|"
                            |= matchParser
                        ]
                , Parser.chompUntilEndOr "{"
                    |> Parser.getChompedString
                    |> Parser.map ((++) state)
                    |> Parser.andThen
                        (\str ->
                            Parser.oneOf
                                [ Parser.succeed (Parser.Done str) |. Parser.end, Parser.succeed (Parser.Loop str) ]
                        )
                ]


{-| Replaces all placeholders with the given arguments using the Intl API on the marked spots


-}
replacePlaceholders : I18n -> List String -> String -> String
replacePlaceholders i18n argList =
    Parser.run (parser i18n argList) >> Result.toMaybe >> Maybe.withDefault fallbackValue


languageToFileName_messages : Language -> String
languageToFileName_messages lang =
    case lang of
        De ->
            "messages.de.1130384026.json"

        En ->
            "messages.en.2875997418.json"
